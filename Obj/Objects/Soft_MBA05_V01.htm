<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Soft_MBA05_V01.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Soft_MBA05_V01.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Aug 07 09:45:05 2024
<BR><P>
<H3>Maximum Stack Usage =        536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Bsp_Receive_Uart1_Fifo_Data &rArr; Bsp_Gnss_Parse_Byte &rArr; Bsp_Gnss_Data_Check &rArr; Bsp_GNSS_Data_Parse_String &rArr; Bsp_GNSS_Data_Deal &rArr; Api_Loca_Distance &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[5f]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5f]">ACC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1d]">ADC1_2_3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[21]">CAN1_SE_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4d]">CAN2_SE_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[10]">CRM_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[46]">DMA1_Channel4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[47]">DMA1_Channel5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[50]">DMA1_Channel7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[64]">DMA2_Channel1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[65]">DMA2_Channel2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[66]">DMA2_Channel3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[67]">DMA2_Channel4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[68]">DMA2_Channel5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[69]">DMA2_Channel6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6a]">DMA2_Channel7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5d]">DMAMUX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[56]">DVP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[16]">EDMA_Stream1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[17]">EDMA_Stream2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[18]">EDMA_Stream3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[19]">EDMA_Stream4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1a]">EDMA_Stream5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1b]">EDMA_Stream6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1c]">EDMA_Stream7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3a]">EDMA_Stream8_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[48]">EMAC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[49]">EMAC_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[34]">ERTCAlarm_IRQHandler</a> from hal_sleep.o(i.ERTCAlarm_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[e]">ERTC_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[11]">EXINT0_IRQHandler</a> from hal_keyled.o(i.EXINT0_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[33]">EXINT15_10_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[12]">EXINT1_IRQHandler</a> from hal_keyled.o(i.EXINT1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[13]">EXINT2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[14]">EXINT3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[15]">EXINT4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[22]">EXINT9_5_IRQHandler</a> from hal_keyled.o(i.EXINT9_5_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[57]">FPU_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2b]">I2C1_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2a]">I2C1_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2d]">I2C2_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2c]">I2C2_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[53]">I2C3_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[52]">I2C3_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4e]">OTGFS1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[35]">OTGFS1_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[55]">OTGFS2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[54]">OTGFS2_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[c]">PVM_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5c]">QSPI1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5b]">QSPI2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3c]">SDIO1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5e]">SDIO2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2f]">SPI2_I2S2EXT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3e]">SPI3_I2S3EXT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5a]">SPI4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from sys_timerun.o(i.SysTick_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_at32f435_437.o(i.SystemInit) referenced from startup_at32f435_437.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[23]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[26]">TMR1_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[24]">TMR1_OVF_TMR10_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[25]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[60]">TMR20_BRK_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[63]">TMR20_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[61]">TMR20_OVF_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[62]">TMR20_TRG_HALL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[27]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[28]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[29]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3d]">TMR5_GLOBAL_IRQHandler</a> from hal_sleep.o(i.TMR5_GLOBAL_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[41]">TMR6_DAC_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[42]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[36]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[39]">TMR8_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[37]">TMR8_OVF_TMR13_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[38]">TMR8_TRG_HALL_TMR14_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from bsp_uartrec.o(i.UART4_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[58]">UART7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[59]">UART8_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from bsp_uartrec.o(i.USART1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from bsp_uartrec.o(i.USART2_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from bsp_uartrec.o(i.USART3_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[b]">WWDT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3b]">XMC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f435_437.o(.text)
 <LI><a href="#[6f]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[70]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6e]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[73]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[72]">fputc</a> from hal_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[71]">isspace</a> from isspace_c.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[6b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(.text)
</UL>
<P><STRONG><a name="[1a0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EDMA_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EDMA_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EDMA_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EDMA_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EDMA_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EDMA_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EDMA_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EDMA_Stream8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EMAC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTGFS1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTGFS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTGFS2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>QSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_I2S2EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_I2S3EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TMR20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TMR20_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TMR20_OVF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TMR20_TRG_HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TMR6_DAC_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TMR8_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR8_OVF_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR8_TRG_HALL_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>XMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[79]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTurn
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_add_node_impolite
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_PWI_Data_Split
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_ICP_Data_Split
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Data_Check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_RMC_Data_Split
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Data_Check
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCICR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Funftoa
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Parse_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Parse_Init
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_PWI_Data_Split
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Data_Check
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Split_Data_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Parse_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_RMC_Data_Split
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Data_Check
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Split_Data_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Parse_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infor_rep
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
</UL>

<P><STRONG><a name="[ca]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Data_Parse_String
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Parse_String
</UL>

<P><STRONG><a name="[7e]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Data_Check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Data_Check
</UL>

<P><STRONG><a name="[80]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Location_Data_Turn
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Loca_Distance
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Temp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Loca_Distance
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Funftoa
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Loca_Distance
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Temp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Funftoa
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Location_Data_Turn
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Loca_Distance
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Updata_Bat_Percent
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Temp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_SloarVolFloat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_SloarVol
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Location_Data_Turn
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Temp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Funftoa
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Location_Data_Turn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Updata_Bat_Percent
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Temp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_SloarVolFloat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_SloarVol
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Funftoa
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_PWI_Data_Split
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_RMC_Data_Split
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Location_Data_Turn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Updata_Bat_Percent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_SloarVol
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Location
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Funftoa
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Funftoa
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Signal_Valid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_RMC_Data_Split
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_SloarVolFloat
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ab]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ad]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[81]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[7f]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[6e]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[1ae]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1af]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[84]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[92]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1b0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[90]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[98]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[95]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[9c]"></a>ADConvert</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_batvol.o(i.ADConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADConvert &rArr; Hal_Start_VSloar_ADC_Convert &rArr; adc_ordinary_channel_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Start_VSloar_ADC_Convert
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Start_VBat_ADC_Convert
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_ADC2_Value
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_ADC1_Value
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arithmetic_Average
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch10ms
</UL>

<P><STRONG><a name="[f6]"></a>API_Check_Xor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_rdsssend.o(i.API_Check_Xor))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
</UL>

<P><STRONG><a name="[a2]"></a>API_Funftoa</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, bsp_rdsssend.o(i.API_Funftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = API_Funftoa &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
</UL>

<P><STRONG><a name="[f7]"></a>API_Hex8_To_String</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_rdsssend.o(i.API_Hex8_To_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_Hex8_To_String
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
</UL>

<P><STRONG><a name="[c8]"></a>Api_Acc_Speed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_gnssparse.o(i.Api_Acc_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
</UL>

<P><STRONG><a name="[a5]"></a>Api_Loca_Distance</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, bsp_gnssparse.o(i.Api_Loca_Distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Api_Loca_Distance &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
</UL>

<P><STRONG><a name="[a9]"></a>Api_Location_Data_Turn</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bsp_gnssparse.o(i.Api_Location_Data_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Api_Location_Data_Turn &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
</UL>

<P><STRONG><a name="[9f]"></a>Arithmetic_Average</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_batvol.o(i.Arithmetic_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Arithmetic_Average
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConvert
</UL>

<P><STRONG><a name="[aa]"></a>Bps_Start_Always_Updata_BatVol_Percent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_batvol.o(i.Bps_Start_Always_Updata_BatVol_Percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Bps_Start_Always_Updata_BatVol_Percent &rArr; Hal_BatVol_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
</UL>

<P><STRONG><a name="[ac]"></a>Bps_Start_Once_Time_Updata_BatVol_Percent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_batvol.o(i.Bps_Start_Once_Time_Updata_BatVol_Percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Bps_Start_Once_Time_Updata_BatVol_Percent &rArr; Hal_BatVol_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>

<P><STRONG><a name="[ad]"></a>Bsp_Add_Loca_Queue</STRONG> (Thumb, 1576 bytes, Stack size 256 bytes, bsp_rdsssend.o(i.Bsp_Add_Loca_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Bsp_Add_Loca_Queue &rArr; API_Funftoa &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTurn
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fundtoa
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Float_to_Buf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Funftoa
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Location
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Temp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_SloarVolFloat
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_BatPercent
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Sys_State
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
</UL>

<P><STRONG><a name="[ba]"></a>Bsp_BDS_Data_Send</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_rdsssend.o(i.Bsp_BDS_Data_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Bsp_BDS_Data_Send &rArr; Bsp_Rdss_Tx_CCTCQ &rArr; Log_str_printf &rArr; uart2_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_str_to_hex
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_str_printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
</UL>

<P><STRONG><a name="[bf]"></a>Bsp_Bat_Vol_Display</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_keyled.o(i.Bsp_Bat_Vol_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Bat_Vol_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Display_Enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_BatPercent
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
</UL>

<P><STRONG><a name="[c1]"></a>Bsp_Error_Led_Display</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_keyled.o(i.Bsp_Error_Led_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Error_Led_Display &rArr; Hal_Error_Led_Display_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Error_Led_Display_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
</UL>

<P><STRONG><a name="[b5]"></a>Bsp_Float_to_Buf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_rdsssend.o(i.Bsp_Float_to_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Float_to_Buf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
</UL>

<P><STRONG><a name="[c4]"></a>Bsp_GNSS_Data_Deal</STRONG> (Thumb, 524 bytes, Stack size 144 bytes, bsp_gnssparse.o(i.Bsp_GNSS_Data_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Bsp_GNSS_Data_Deal &rArr; Api_Loca_Distance &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Loca_If_Vaild
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Location_Data_Turn
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Loca_Distance
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Acc_Speed
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Parse_String
</UL>

<P><STRONG><a name="[c9]"></a>Bsp_GNSS_Data_Parse_String</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bsp_gnssparse.o(i.Bsp_GNSS_Data_Parse_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Bsp_GNSS_Data_Parse_String &rArr; Bsp_GNSS_Data_Deal &rArr; Api_Loca_Distance &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_str_printf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_RMC_Data_Split
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Data_Check
</UL>

<P><STRONG><a name="[cc]"></a>Bsp_GNSS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gnssparse.o(i.Bsp_GNSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_GNSS_Init &rArr; Bsp_GNSS_Split_Data_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Split_Data_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Parse_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_SOS_Mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_PULL_Mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Normal_Mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Move_Mode
</UL>

<P><STRONG><a name="[cd]"></a>Bsp_GNSS_Parse_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_gnssparse.o(i.Bsp_GNSS_Parse_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_GNSS_Parse_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Data_Check
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Init
</UL>

<P><STRONG><a name="[ce]"></a>Bsp_GNSS_Split_Data_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_gnssparse.o(i.Bsp_GNSS_Split_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_GNSS_Split_Data_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Init
</UL>

<P><STRONG><a name="[ae]"></a>Bsp_Get_BatPercent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_batvol.o(i.Bsp_Get_BatPercent))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bat_Vol_Display
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infor_rep
</UL>

<P><STRONG><a name="[f1]"></a>Bsp_Get_CardID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_config.o(i.Bsp_Get_CardID))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_ICP_Data_Split
</UL>

<P><STRONG><a name="[b1]"></a>Bsp_Get_Location</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, bsp_gnssparse.o(i.Bsp_Get_Location))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bsp_Get_Location &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
</UL>

<P><STRONG><a name="[19e]"></a>Bsp_Get_Pow_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_keyled.o(i.Bsp_Get_Pow_State))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_gnss
</UL>

<P><STRONG><a name="[cf]"></a>Bsp_Get_SloarVol</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_batvol.o(i.Bsp_Get_SloarVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Bsp_Get_SloarVol &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
</UL>

<P><STRONG><a name="[af]"></a>Bsp_Get_SloarVolFloat</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_batvol.o(i.Bsp_Get_SloarVolFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Bsp_Get_SloarVolFloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
</UL>

<P><STRONG><a name="[b2]"></a>Bsp_Get_Sys_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_keyled.o(i.Bsp_Get_Sys_State))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_rdss
</UL>

<P><STRONG><a name="[b0]"></a>Bsp_Get_Temp</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_batvol.o(i.Bsp_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Bsp_Get_Temp &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
</UL>

<P><STRONG><a name="[e3]"></a>Bsp_Get_Updata_Bat_Voltage_Once_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_batvol.o(i.Bsp_Get_Updata_Bat_Voltage_Once_State))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>

<P><STRONG><a name="[d0]"></a>Bsp_Gnss_Data_Check</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bsp_gnssparse.o(i.Bsp_Gnss_Data_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Bsp_Gnss_Data_Check &rArr; Bsp_GNSS_Data_Parse_String &rArr; Bsp_GNSS_Data_Deal &rArr; Api_Loca_Distance &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gnss_Check_Xor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Parse_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Parse_String
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Parse_Byte
</UL>

<P><STRONG><a name="[c6]"></a>Bsp_Gnss_Loca_If_Vaild</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_gnssparse.o(i.Bsp_Gnss_Loca_If_Vaild))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Deal
</UL>

<P><STRONG><a name="[d2]"></a>Bsp_Gnss_Parse_Byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_gnssparse.o(i.Bsp_Gnss_Parse_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Bsp_Gnss_Parse_Byte &rArr; Bsp_Gnss_Data_Check &rArr; Bsp_GNSS_Data_Parse_String &rArr; Bsp_GNSS_Data_Deal &rArr; Api_Loca_Distance &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Data_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart1_Fifo_Data
</UL>

<P><STRONG><a name="[cb]"></a>Bsp_Gnss_RMC_Data_Split</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, bsp_gnssparse.o(i.Bsp_Gnss_RMC_Data_Split))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Bsp_Gnss_RMC_Data_Split &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Parse_String
</UL>

<P><STRONG><a name="[d4]"></a>Bsp_MagKey_Scan</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_keyled.o(i.Bsp_MagKey_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Bsp_MagKey_Scan &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_MagKey_State
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch10ms
</UL>

<P><STRONG><a name="[d7]"></a>Bsp_Nor_SOS_SendCtrl</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, bsp_rdsssend.o(i.Bsp_Nor_SOS_SendCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Bsp_Nor_SOS_SendCtrl &rArr; Bsp_Add_Loca_Queue &rArr; API_Funftoa &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_ID
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCICR
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BDS_Data_Send
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Signal_Is_Ok
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bps_Start_Once_Time_Updata_BatVol_Percent
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Sys_State
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
</UL>

<P><STRONG><a name="[e1]"></a>Bsp_Port_InforGet_Ctrl</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bsp_config.o(i.Bsp_Port_InforGet_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Bsp_Port_InforGet_Ctrl &rArr; Hal_Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCICR
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Updata_Bat_Voltage_Once_State
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bps_Start_Once_Time_Updata_BatVol_Percent
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infor_rep
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch100ms
</UL>

<P><STRONG><a name="[e4]"></a>Bsp_Port_Parse_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bsp_config.o(i.Bsp_Port_Parse_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Bsp_Port_Parse_Byte &rArr; Port_Rxdata_deal &rArr; open_closs_rdss &rArr; Hal_Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart3_Fifo_Data
</UL>

<P><STRONG><a name="[e7]"></a>Bsp_Pull_SendCtrl</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, bsp_rdsssend.o(i.Bsp_Pull_SendCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Bsp_Pull_SendCtrl &rArr; Bsp_Add_Loca_Queue &rArr; API_Funftoa &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_ID
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCICR
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BDS_Data_Send
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Signal_Is_Ok
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bps_Start_Once_Time_Updata_BatVol_Percent
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Sys_State
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
</UL>

<P><STRONG><a name="[e8]"></a>Bsp_RDSS_Data_Parse_String</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bsp_rdssparse.o(i.Bsp_RDSS_Data_Parse_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Bsp_RDSS_Data_Parse_String &rArr; Bsp_Rdss_PWI_Data_Split &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_PWI_Data_Split
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_ICP_Data_Split
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_str_printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Data_Check
</UL>

<P><STRONG><a name="[eb]"></a>Bsp_RDSS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_rdssparse.o(i.Bsp_RDSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_RDSS_Init &rArr; Bsp_RDSS_Parse_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Split_Data_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Parse_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_SOS_Mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_PULL_Mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Normal_Mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Move_Mode
</UL>

<P><STRONG><a name="[ec]"></a>Bsp_RDSS_Parse_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_rdssparse.o(i.Bsp_RDSS_Parse_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_RDSS_Parse_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Data_Check
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Init
</UL>

<P><STRONG><a name="[ed]"></a>Bsp_RDSS_Split_Data_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_rdssparse.o(i.Bsp_RDSS_Split_Data_Init))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Init
</UL>

<P><STRONG><a name="[ee]"></a>Bsp_Rdss_Data_Check</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bsp_rdssparse.o(i.Bsp_Rdss_Data_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Bsp_Rdss_Data_Check &rArr; Bsp_RDSS_Data_Parse_String &rArr; Bsp_Rdss_PWI_Data_Split &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rdss_Check_Xor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Parse_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Data_Parse_String
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Parse_Byte
</UL>

<P><STRONG><a name="[e9]"></a>Bsp_Rdss_ICP_Data_Split</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, bsp_rdssparse.o(i.Bsp_Rdss_ICP_Data_Split))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bsp_Rdss_ICP_Data_Split &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_str_to_uint32
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Send_Get_CardID
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_CardID
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Data_Parse_String
</UL>

<P><STRONG><a name="[ea]"></a>Bsp_Rdss_PWI_Data_Split</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, bsp_rdssparse.o(i.Bsp_Rdss_PWI_Data_Split))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Bsp_Rdss_PWI_Data_Split &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Signal_Valid
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Data_Parse_String
</UL>

<P><STRONG><a name="[f4]"></a>Bsp_Rdss_Parse_Byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_rdssparse.o(i.Bsp_Rdss_Parse_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Bsp_Rdss_Parse_Byte &rArr; Bsp_Rdss_Data_Check &rArr; Bsp_RDSS_Data_Parse_String &rArr; Bsp_Rdss_PWI_Data_Split &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Data_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart4_Fifo_Data
</UL>

<P><STRONG><a name="[de]"></a>Bsp_Rdss_Signal_Is_Ok</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_rdssparse.o(i.Bsp_Rdss_Signal_Is_Ok))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
</UL>

<P><STRONG><a name="[f3]"></a>Bsp_Rdss_Signal_Valid</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_rdssparse.o(i.Bsp_Rdss_Signal_Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Rdss_Signal_Valid
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_PWI_Data_Split
</UL>

<P><STRONG><a name="[dc]"></a>Bsp_Rdss_Tx_CCICR</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, bsp_rdsssend.o(i.Bsp_Rdss_Tx_CCICR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bsp_Rdss_Tx_CCICR &rArr; uart4_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_tx_string
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>

<P><STRONG><a name="[be]"></a>Bsp_Rdss_Tx_CCTCQ</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, bsp_rdsssend.o(i.Bsp_Rdss_Tx_CCTCQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Bsp_Rdss_Tx_CCTCQ &rArr; Log_str_printf &rArr; uart2_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_tx_string
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Hex8_To_String
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Check_Xor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_str_printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BDS_Data_Send
</UL>

<P><STRONG><a name="[d8]"></a>Bsp_Read_ID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_config.o(i.Bsp_Read_ID))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Flash_Read_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infor_rep
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_write
</UL>

<P><STRONG><a name="[f9]"></a>Bsp_Receive_Uart1_Fifo_Data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_uartrec.o(i.Bsp_Receive_Uart1_Fifo_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Bsp_Receive_Uart1_Fifo_Data &rArr; Bsp_Gnss_Parse_Byte &rArr; Bsp_Gnss_Data_Check &rArr; Bsp_GNSS_Data_Parse_String &rArr; Bsp_GNSS_Data_Deal &rArr; Api_Loca_Distance &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_get_node
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_delete_node
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Parse_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>Bsp_Receive_Uart2_Fifo_Data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_uartrec.o(i.Bsp_Receive_Uart2_Fifo_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Receive_Uart2_Fifo_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_get_node
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_delete_node
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>Bsp_Receive_Uart3_Fifo_Data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_uartrec.o(i.Bsp_Receive_Uart3_Fifo_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Bsp_Receive_Uart3_Fifo_Data &rArr; Bsp_Port_Parse_Byte &rArr; Port_Rxdata_deal &rArr; open_closs_rdss &rArr; Hal_Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_get_node
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_delete_node
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_Parse_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>Bsp_Receive_Uart4_Fifo_Data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_uartrec.o(i.Bsp_Receive_Uart4_Fifo_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Bsp_Receive_Uart4_Fifo_Data &rArr; Bsp_Rdss_Parse_Byte &rArr; Bsp_Rdss_Data_Check &rArr; Bsp_RDSS_Data_Parse_String &rArr; Bsp_Rdss_PWI_Data_Split &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_get_node
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_delete_node
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Parse_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>Bsp_Send_Get_CardID</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_rdsssend.o(i.Bsp_Send_Get_CardID))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_ICP_Data_Split
</UL>

<P><STRONG><a name="[ff]"></a>Bsp_Start_Move_Mode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_rdsssend.o(i.Bsp_Start_Move_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Start_Move_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_Move_Mode
</UL>

<P><STRONG><a name="[100]"></a>Bsp_Start_Normal_Mode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_rdsssend.o(i.Bsp_Start_Normal_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Start_Normal_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_Normal_Mode
</UL>

<P><STRONG><a name="[101]"></a>Bsp_Start_PULL_Mode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_rdsssend.o(i.Bsp_Start_PULL_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Start_PULL_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_PULL_Mode
</UL>

<P><STRONG><a name="[102]"></a>Bsp_Start_SOS_Mode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_rdsssend.o(i.Bsp_Start_SOS_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Start_SOS_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_SOS_Mode
</UL>

<P><STRONG><a name="[103]"></a>Bsp_Sys_State_Ctrl</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, bsp_keyled.o(i.Bsp_Sys_State_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bsp_Sys_State_Ctrl &rArr; Key_Start_SOS_Mode &rArr; Bsp_Start_SOS_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_SlideKey_State
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_SideKey_State
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_SOS_Mode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_PULL_Mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_Normal_Mode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_Move_Mode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
</UL>

<P><STRONG><a name="[10a]"></a>Bsp_Uart_Fifo_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_uartrec.o(i.Bsp_Uart_Fifo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_Uart_Fifo_Init &rArr; lm_fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fun_Bsp_Init
</UL>

<P><STRONG><a name="[10c]"></a>Bsp_Updata_Bat_Percent</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp_batvol.o(i.Bsp_Updata_Bat_Percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Bsp_Updata_Bat_Percent &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_ADC_Deinit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch10ms
</UL>

<P><STRONG><a name="[10e]"></a>Bsp_Vbat_Chag_Ctrl</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, bsp_keyled.o(i.Bsp_Vbat_Chag_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Bsp_Vbat_Chag_Ctrl &rArr; Sys_Start_Charge_Mode &rArr; Hal_Uart3_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_USB_In_State
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_ChagFull_State
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Heartbeat
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Display_Enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_BatPercent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bps_Start_Always_Updata_BatVol_Percent
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Stop_Charge_Mode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Start_Charge_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
</UL>

<P><STRONG><a name="[114]"></a>Bsp_Write_Boot_Flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_config.o(i.Bsp_Write_Boot_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_Write_Boot_Flag &rArr; Hal_Flash_Write_Word &rArr; flash_word_program &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Flash_Write_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start_rep
</UL>

<P><STRONG><a name="[116]"></a>Bsp_Write_ID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_config.o(i.Bsp_Write_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_Write_ID &rArr; Hal_Flash_Write_Word &rArr; flash_word_program &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Flash_Write_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_write
</UL>

<P><STRONG><a name="[34]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_sleep.o(i.ERTCAlarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ERTCAlarm_IRQHandler &rArr; ertc_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_interrupt_flag_get
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_keyled.o(i.EXINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXINT0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_interrupt_flag_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_keyled.o(i.EXINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXINT1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_interrupt_flag_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_keyled.o(i.EXINT9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXINT9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_interrupt_flag_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>Fun_Bsp_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_init.o(i.Fun_Bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Fun_Bsp_Init &rArr; Bsp_Uart_Fifo_Init &rArr; lm_fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Fifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>Fundtoa</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, api_common.o(i.Fundtoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Fundtoa
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
</UL>

<P><STRONG><a name="[d1]"></a>Gnss_Check_Xor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_gnssparse.o(i.Gnss_Check_Xor))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_Data_Check
</UL>

<P><STRONG><a name="[10d]"></a>Hal_ADC_Deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_powmanage.o(i.Hal_ADC_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_ADC_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Updata_Bat_Percent
</UL>

<P><STRONG><a name="[ab]"></a>Hal_BatVol_Init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, hal_powmanage.o(i.Hal_BatVol_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Hal_BatVol_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_software_trigger_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_channel_set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_common_default_para_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_common_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_default_para_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bps_Start_Once_Time_Updata_BatVol_Percent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bps_Start_Always_Updata_BatVol_Percent
</UL>

<P><STRONG><a name="[c0]"></a>Hal_Bat_Led_Display_Enable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hal_keyled.o(i.Hal_Bat_Led_Display_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bat_Vol_Display
</UL>

<P><STRONG><a name="[112]"></a>Hal_Bat_Led_Heartbeat</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_keyled.o(i.Hal_Bat_Led_Heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_Bat_Led_Heartbeat &rArr; Heartbeat_BAT3_Led
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT4_Led
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT3_Led
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT2_Led
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT1_Led
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
</UL>

<P><STRONG><a name="[12a]"></a>Hal_Charge_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hal_powmanage.o(i.Hal_Charge_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Hal_Charge_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[c2]"></a>Hal_Error_Led_Display_Enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_keyled.o(i.Hal_Error_Led_Display_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_Error_Led_Display_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_data_bit_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Error_Led_Display
</UL>

<P><STRONG><a name="[12c]"></a>Hal_Falsh_Jump</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, hal_flash.o(i.Hal_Falsh_Jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_Falsh_Jump &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_clear_sys_status
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start_rep
</UL>

<P><STRONG><a name="[f8]"></a>Hal_Flash_Read_Word</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash.o(i.Hal_Flash_Read_Word))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_ID
</UL>

<P><STRONG><a name="[115]"></a>Hal_Flash_Write_Word</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_flash.o(i.Hal_Flash_Write_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hal_Flash_Write_Word &rArr; flash_word_program &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Write_ID
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Write_Boot_Flag
</UL>

<P><STRONG><a name="[9e]"></a>Hal_Get_ADC1_Value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_powmanage.o(i.Hal_Get_ADC1_Value))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_conversion_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConvert
</UL>

<P><STRONG><a name="[a1]"></a>Hal_Get_ADC2_Value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_powmanage.o(i.Hal_Get_ADC2_Value))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_conversion_data_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConvert
</UL>

<P><STRONG><a name="[10f]"></a>Hal_Get_ChagFull_State</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_powmanage.o(i.Hal_Get_ChagFull_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Get_ChagFull_State
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
</UL>

<P><STRONG><a name="[d5]"></a>Hal_Get_MagKey_State</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_keyled.o(i.Hal_Get_MagKey_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Get_MagKey_State
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MagKey_Scan
</UL>

<P><STRONG><a name="[104]"></a>Hal_Get_SideKey_State</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_keyled.o(i.Hal_Get_SideKey_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Get_SideKey_State
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Sys_State_Ctrl
</UL>

<P><STRONG><a name="[105]"></a>Hal_Get_SlideKey_State</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_keyled.o(i.Hal_Get_SlideKey_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Get_SlideKey_State
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Sys_State_Ctrl
</UL>

<P><STRONG><a name="[110]"></a>Hal_Get_USB_In_State</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_powmanage.o(i.Hal_Get_USB_In_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Get_USB_In_State
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
</UL>

<P><STRONG><a name="[134]"></a>Hal_Key_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hal_keyled.o(i.Hal_Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Hal_Key_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[135]"></a>Hal_Led_Init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, hal_keyled.o(i.Hal_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Hal_Led_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[136]"></a>Hal_Pow_Switch_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, hal_powmanage.o(i.Hal_Pow_Switch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Hal_Pow_Switch_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[137]"></a>Hal_RTC_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hal_sleep.o(i.Hal_RTC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Hal_RTC_init &rArr; ertc_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_wait_update
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_time_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_hour_mode_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_divider_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_date_set
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ertc_clock_select
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ertc_clock_enable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_battery_powered_domain_reset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwc_battery_powered_domain_access
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[9d]"></a>Hal_Start_VBat_ADC_Convert</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_powmanage.o(i.Hal_Start_VBat_ADC_Convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Hal_Start_VBat_ADC_Convert &rArr; adc_ordinary_channel_set
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_software_trigger_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConvert
</UL>

<P><STRONG><a name="[a0]"></a>Hal_Start_VSloar_ADC_Convert</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_powmanage.o(i.Hal_Start_VSloar_ADC_Convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Hal_Start_VSloar_ADC_Convert &rArr; adc_ordinary_channel_set
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_software_trigger_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConvert
</UL>

<P><STRONG><a name="[144]"></a>Hal_System_Clock_Init</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, hal_init.o(i.Hal_System_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Hal_System_Clock_Init &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[e0]"></a>Hal_Uart1_Deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_uart.o(i.Hal_Uart1_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_Uart1_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_SOS_Mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_PULL_Mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Normal_Mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Move_Mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_rdss
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_gnss
</UL>

<P><STRONG><a name="[dd]"></a>Hal_Uart1_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hal_uart.o(i.Hal_Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hal_Uart1_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_gnss
</UL>

<P><STRONG><a name="[157]"></a>Hal_Uart2_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hal_uart.o(i.Hal_Uart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hal_Uart2_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[158]"></a>Hal_Uart3_Deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_uart.o(i.Hal_Uart3_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_Uart3_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Stop_Charge_Mode
</UL>

<P><STRONG><a name="[159]"></a>Hal_Uart3_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, hal_uart.o(i.Hal_Uart3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hal_Uart3_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_receive_pin_swap
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Start_Charge_Mode
</UL>

<P><STRONG><a name="[db]"></a>Hal_Uart4_Deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_uart.o(i.Hal_Uart4_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_SOS_Mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_PULL_Mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Normal_Mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Move_Mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_rdss
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_gnss
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>

<P><STRONG><a name="[da]"></a>Hal_Uart4_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hal_uart.o(i.Hal_Uart4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hal_Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_rdss
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>

<P><STRONG><a name="[127]"></a>Heartbeat_BAT1_Led</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_keyled.o(i.Heartbeat_BAT1_Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Heartbeat_BAT1_Led
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_data_bit_read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Heartbeat
</UL>

<P><STRONG><a name="[128]"></a>Heartbeat_BAT2_Led</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_keyled.o(i.Heartbeat_BAT2_Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Heartbeat_BAT2_Led
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_data_bit_read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Heartbeat
</UL>

<P><STRONG><a name="[129]"></a>Heartbeat_BAT3_Led</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_keyled.o(i.Heartbeat_BAT3_Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Heartbeat_BAT3_Led
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_data_bit_read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Heartbeat
</UL>

<P><STRONG><a name="[126]"></a>Heartbeat_BAT4_Led</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_keyled.o(i.Heartbeat_BAT4_Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Heartbeat_BAT4_Led
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_data_bit_read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Heartbeat
</UL>

<P><STRONG><a name="[107]"></a>Key_Start_Move_Mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_keyled.o(i.Key_Start_Move_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Start_Move_Mode &rArr; Bsp_Start_Move_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Move_Mode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Sys_State_Ctrl
</UL>

<P><STRONG><a name="[109]"></a>Key_Start_Normal_Mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_keyled.o(i.Key_Start_Normal_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Start_Normal_Mode &rArr; Bsp_Start_Normal_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Normal_Mode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Sys_State_Ctrl
</UL>

<P><STRONG><a name="[108]"></a>Key_Start_PULL_Mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_keyled.o(i.Key_Start_PULL_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Start_PULL_Mode &rArr; Bsp_Start_PULL_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_PULL_Mode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Sys_State_Ctrl
</UL>

<P><STRONG><a name="[106]"></a>Key_Start_SOS_Mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_keyled.o(i.Key_Start_SOS_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Start_SOS_Mode &rArr; Bsp_Start_SOS_Mode &rArr; Hal_Uart4_Deinit &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_SOS_Mode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Sys_State_Ctrl
</UL>

<P><STRONG><a name="[bc]"></a>Log_str_printf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_log.o(i.Log_str_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Log_str_printf &rArr; uart2_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_tx_string
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BDS_Data_Send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Data_Parse_String
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Parse_String
</UL>

<P><STRONG><a name="[15d]"></a>Mcu_Hal_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_init.o(i.Mcu_Hal_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Mcu_Hal_Init &rArr; Hal_Uart2_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Fre_Calib
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Pow_Switch_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Charge_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Key_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>Port_Checksum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_config.o(i.Port_Checksum))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_Parse_Byte
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
</UL>

<P><STRONG><a name="[e6]"></a>Port_Rxdata_deal</STRONG> (Thumb, 114 bytes, Stack size 120 bytes, bsp_config.o(i.Port_Rxdata_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Port_Rxdata_deal &rArr; open_closs_rdss &rArr; Hal_Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;versions_rep
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start_rep
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_rdss
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_gnss
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infor_get
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_Parse_Byte
</UL>

<P><STRONG><a name="[167]"></a>Port_Tx_Cmd_Pack</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bsp_config.o(i.Port_Tx_Cmd_Pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Port_Tx_Cmd_Pack &rArr; uart3_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_tx_string
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;versions_rep
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start_rep
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_rdss
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_gnss
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infor_rep
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_write
</UL>

<P><STRONG><a name="[160]"></a>RTC_Fre_Calib</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_sleep.o(i.RTC_Fre_Calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_Fre_Calib &rArr; lick_frequency_get &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_divider_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[df]"></a>RTC_Printf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_sleep.o(i.RTC_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_calendar_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
</UL>

<P><STRONG><a name="[ef]"></a>Rdss_Check_Xor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_rdssparse.o(i.Rdss_Check_Xor))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Data_Check
</UL>

<P><STRONG><a name="[16b]"></a>SlotBranch100ms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sys_timerun.o(i.SlotBranch100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SlotBranch100ms &rArr; SlotBranch1s &rArr; Bsp_Pull_SendCtrl &rArr; Bsp_Add_Loca_Queue &rArr; API_Funftoa &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch10ms
</UL>

<P><STRONG><a name="[16d]"></a>SlotBranch10ms</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_timerun.o(i.SlotBranch10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SlotBranch10ms &rArr; SlotBranch100ms &rArr; SlotBranch1s &rArr; Bsp_Pull_SendCtrl &rArr; Bsp_Add_Loca_Queue &rArr; API_Funftoa &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Updata_Bat_Percent
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADConvert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MagKey_Scan
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Routime
</UL>

<P><STRONG><a name="[16c]"></a>SlotBranch1s</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sys_timerun.o(i.SlotBranch1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SlotBranch1s &rArr; Bsp_Pull_SendCtrl &rArr; Bsp_Add_Loca_Queue &rArr; API_Funftoa &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Temp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_SloarVol
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Sys_State_Ctrl
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Error_Led_Display
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Bat_Vol_Display
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch100ms
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_timerun.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>Sys_Start_Charge_Mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_keyled.o(i.Sys_Start_Charge_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Sys_Start_Charge_Mode &rArr; Hal_Uart3_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
</UL>

<P><STRONG><a name="[113]"></a>Sys_Stop_Charge_Mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_keyled.o(i.Sys_Stop_Charge_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sys_Stop_Charge_Mode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Deinit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Vbat_Chag_Ctrl
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, system_at32f435_437.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_sleep.o(i.TMR5_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR5_GLOBAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_interrupt_flag_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_flag_clear
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_value_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>TimeTurn</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, api_common.o(i.TimeTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TimeTurn &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Add_Loca_Queue
</UL>

<P><STRONG><a name="[171]"></a>Time_Routime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_timerun.o(i.Time_Routime))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Time_Routime &rArr; SlotBranch10ms &rArr; SlotBranch100ms &rArr; SlotBranch1s &rArr; Bsp_Pull_SendCtrl &rArr; Bsp_Add_Loca_Queue &rArr; API_Funftoa &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_uartrec.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; lm_fifo_add_node_impolite
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_add_node_impolite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_uartrec.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; lm_fifo_add_node_impolite
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_add_node_impolite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_uartrec.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; lm_fifo_add_node_impolite
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_add_node_impolite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_uartrec.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; lm_fifo_add_node_impolite
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_add_node_impolite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b1]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BDS_Data_Send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_ICP_Data_Split
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RDSS_Data_Parse_String
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_str_printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Location
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GNSS_Data_Parse_String
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Stop_Charge_Mode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Start_Charge_Mode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_SOS_Mode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_PULL_Mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_Normal_Mode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Start_Move_Mode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Sys_State_Ctrl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MagKey_Scan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Printf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlotBranch1s
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>

<P><STRONG><a name="[1b2]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b3]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[178]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b4]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c3]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Float_to_Buf
</UL>

<P><STRONG><a name="[1b5]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b6]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[17c]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[a8]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Loca_Distance
</UL>

<P><STRONG><a name="[d3]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_PWI_Data_Split
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gnss_RMC_Data_Split
</UL>

<P><STRONG><a name="[a6]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Loca_Distance
</UL>

<P><STRONG><a name="[a7]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Loca_Distance
</UL>

<P><STRONG><a name="[182]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[184]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[17e]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[183]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[179]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[17b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[17d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[181]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[1b7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[17a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[99]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[123]"></a>adc_base_config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32f435_437_adc.o(i.adc_base_config))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
</UL>

<P><STRONG><a name="[122]"></a>adc_base_default_para_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_adc.o(i.adc_base_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
</UL>

<P><STRONG><a name="[121]"></a>adc_common_config</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, at32f435_437_adc.o(i.adc_common_config))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
</UL>

<P><STRONG><a name="[120]"></a>adc_common_default_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f435_437_adc.o(i.adc_common_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
</UL>

<P><STRONG><a name="[11c]"></a>adc_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_ADC_Deinit
</UL>

<P><STRONG><a name="[124]"></a>adc_ordinary_channel_set</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, at32f435_437_adc.o(i.adc_ordinary_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_ordinary_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Start_VSloar_ADC_Convert
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Start_VBat_ADC_Convert
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
</UL>

<P><STRONG><a name="[132]"></a>adc_ordinary_conversion_data_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_adc.o(i.adc_ordinary_conversion_data_get))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_ADC2_Value
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_ADC1_Value
</UL>

<P><STRONG><a name="[125]"></a>adc_ordinary_software_trigger_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_adc.o(i.adc_ordinary_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Start_VSloar_ADC_Convert
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Start_VBat_ADC_Convert
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
</UL>

<P><STRONG><a name="[12d]"></a>app_clear_sys_status</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, hal_flash.o(i.app_clear_sys_status))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Falsh_Jump
</UL>

<P><STRONG><a name="[bd]"></a>convert_str_to_hex</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, api_common.o(i.convert_str_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convert_str_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BDS_Data_Send
</UL>

<P><STRONG><a name="[f0]"></a>convert_str_to_uint32</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_common.o(i.convert_str_to_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convert_str_to_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_ICP_Data_Split
</UL>

<P><STRONG><a name="[148]"></a>crm_ahb_div_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[14a]"></a>crm_apb1_div_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[149]"></a>crm_apb2_div_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[14b]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_auto_step_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[139]"></a>crm_battery_powered_domain_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_battery_powered_domain_reset))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[13a]"></a>crm_clock_source_enable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[189]"></a>crm_clocks_freq_get</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, at32f435_437_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[13d]"></a>crm_ertc_clock_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_ertc_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[13c]"></a>crm_ertc_clock_select</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_ertc_clock_select))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[13b]"></a>crm_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[146]"></a>crm_hext_stable_wait</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, at32f435_437_crm.o(i.crm_hext_stable_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_hext_stable_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[11f]"></a>crm_periph_clock_enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f435_437_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Falsh_Jump
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[19f]"></a>crm_periph_reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f435_437_crm.o(i.crm_periph_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
</UL>

<P><STRONG><a name="[147]"></a>crm_pll_config</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, at32f435_437_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[145]"></a>crm_reset</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[14c]"></a>crm_sysclk_switch</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[14d]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[18a]"></a>ertc_bcd_to_num</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f435_437_ertc.o(i.ertc_bcd_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_calendar_get
</UL>

<P><STRONG><a name="[16a]"></a>ertc_calendar_get</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, at32f435_437_ertc.o(i.ertc_calendar_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ertc_calendar_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_bcd_to_num
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Printf
</UL>

<P><STRONG><a name="[142]"></a>ertc_date_set</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, at32f435_437_ertc.o(i.ertc_date_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ertc_date_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_write_protect_disable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_wait_update
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_num_to_bcd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[140]"></a>ertc_divider_set</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at32f435_437_ertc.o(i.ertc_divider_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ertc_divider_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_write_protect_disable
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Fre_Calib
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[118]"></a>ertc_flag_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f435_437_ertc.o(i.ertc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>ertc_hour_mode_set</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, at32f435_437_ertc.o(i.ertc_hour_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ertc_hour_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_write_protect_disable
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[18d]"></a>ertc_init_mode_enter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, at32f435_437_ertc.o(i.ertc_init_mode_enter))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_time_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_hour_mode_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_divider_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_date_set
</UL>

<P><STRONG><a name="[117]"></a>ertc_interrupt_flag_get</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, at32f435_437_ertc.o(i.ertc_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ertc_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>ertc_num_to_bcd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f435_437_ertc.o(i.ertc_num_to_bcd))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_time_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_date_set
</UL>

<P><STRONG><a name="[13e]"></a>ertc_reset</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, at32f435_437_ertc.o(i.ertc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ertc_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_write_protect_disable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_wait_update
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[143]"></a>ertc_time_set</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, at32f435_437_ertc.o(i.ertc_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ertc_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_write_protect_disable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_wait_update
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_num_to_bcd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[13f]"></a>ertc_wait_update</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f435_437_ertc.o(i.ertc_wait_update))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_time_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_reset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_date_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[18c]"></a>ertc_write_protect_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_ertc.o(i.ertc_write_protect_disable))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_time_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_hour_mode_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_divider_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc_date_set
</UL>

<P><STRONG><a name="[119]"></a>exint_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_exint.o(i.exint_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT0_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>exint_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f435_437_exint.o(i.exint_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT0_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[18f]"></a>flash_bank1_operation_status_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f435_437_flash.o(i.flash_bank1_operation_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>

<P><STRONG><a name="[18e]"></a>flash_bank1_operation_wait_for</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, at32f435_437_flash.o(i.flash_bank1_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_bank1_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
</UL>

<P><STRONG><a name="[191]"></a>flash_bank2_operation_status_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f435_437_flash.o(i.flash_bank2_operation_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
</UL>

<P><STRONG><a name="[190]"></a>flash_bank2_operation_wait_for</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, at32f435_437_flash.o(i.flash_bank2_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
</UL>

<P><STRONG><a name="[130]"></a>flash_sector_erase</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, at32f435_437_flash.o(i.flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flash_sector_erase &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Flash_Write_Word
</UL>

<P><STRONG><a name="[12f]"></a>flash_unlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f435_437_flash.o(i.flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Flash_Write_Word
</UL>

<P><STRONG><a name="[131]"></a>flash_word_program</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, at32f435_437_flash.o(i.flash_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_word_program &rArr; flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Flash_Write_Word
</UL>

<P><STRONG><a name="[72]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hal_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[d9]"></a>gpio_bits_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_bits_reset))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Pow_Switch_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Error_Led_Display_Enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Display_Enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_SOS_Mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_PULL_Mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Normal_Mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Move_Mode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start_rep
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_rdss
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_gnss
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>

<P><STRONG><a name="[d6]"></a>gpio_bits_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_bits_set))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Pow_Switch_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Charge_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Error_Led_Display_Enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Bat_Led_Display_Enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pull_SendCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Nor_SOS_SendCtrl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_SOS_Mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_PULL_Mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Normal_Mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Start_Move_Mode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Start_Charge_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MagKey_Scan
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start_rep
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_rdss
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_closs_gnss
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>

<P><STRONG><a name="[15b]"></a>gpio_bits_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_bits_write))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT4_Led
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT3_Led
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT2_Led
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT1_Led
</UL>

<P><STRONG><a name="[11d]"></a>gpio_default_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Pow_Switch_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Charge_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Key_Init
</UL>

<P><STRONG><a name="[11e]"></a>gpio_init</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, at32f435_437_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_BatVol_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Pow_Switch_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Charge_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Key_Init
</UL>

<P><STRONG><a name="[133]"></a>gpio_input_data_bit_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_input_data_bit_read))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_USB_In_State
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_ChagFull_State
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_SlideKey_State
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_SideKey_State
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_MagKey_State
</UL>

<P><STRONG><a name="[12b]"></a>gpio_output_data_bit_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_output_data_bit_read))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT4_Led
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT3_Led
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT2_Led
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_BAT1_Led
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Error_Led_Display_Enable
</UL>

<P><STRONG><a name="[152]"></a>gpio_pin_mux_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at32f435_437_gpio.o(i.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
</UL>

<P><STRONG><a name="[164]"></a>id_write</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bsp_config.o(i.id_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = id_write &rArr; Port_Tx_Cmd_Pack &rArr; uart3_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_ID
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Write_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>

<P><STRONG><a name="[163]"></a>infor_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_config.o(i.infor_get))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>

<P><STRONG><a name="[e2]"></a>infor_rep</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bsp_config.o(i.infor_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = infor_rep &rArr; Port_Tx_Cmd_Pack &rArr; uart3_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Read_ID
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_BatPercent
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Port_InforGet_Ctrl
</UL>

<P><STRONG><a name="[169]"></a>lick_frequency_get</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, hal_sleep.o(i.lick_frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lick_frequency_get &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_iremap_config
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_interrupt_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_input_channel_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_input_channel_divider_set
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_event_sw_trigger
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_div_value_set
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Fre_Calib
</UL>

<P><STRONG><a name="[175]"></a>lm_fifo_add_node_impolite</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, api_fifo.o(i.lm_fifo_add_node_impolite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lm_fifo_add_node_impolite
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_is_full
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_delete_node_for_ISR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>lm_fifo_delete_node</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, api_fifo.o(i.lm_fifo_delete_node))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart4_Fifo_Data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart3_Fifo_Data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart2_Fifo_Data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart1_Fifo_Data
</UL>

<P><STRONG><a name="[19d]"></a>lm_fifo_delete_node_for_ISR</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, api_fifo.o(i.lm_fifo_delete_node_for_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_add_node_impolite
</UL>

<P><STRONG><a name="[fa]"></a>lm_fifo_get_node</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, api_fifo.o(i.lm_fifo_get_node))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart4_Fifo_Data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart3_Fifo_Data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart2_Fifo_Data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart1_Fifo_Data
</UL>

<P><STRONG><a name="[10b]"></a>lm_fifo_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, api_fifo.o(i.lm_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lm_fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Uart_Fifo_Init
</UL>

<P><STRONG><a name="[19c]"></a>lm_fifo_is_full</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, api_fifo.o(i.lm_fifo_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm_fifo_add_node_impolite
</UL>

<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = main &rArr; Bsp_Receive_Uart1_Fifo_Data &rArr; Bsp_Gnss_Parse_Byte &rArr; Bsp_Gnss_Data_Check &rArr; Bsp_GNSS_Data_Parse_String &rArr; Bsp_GNSS_Data_Deal &rArr; Api_Loca_Distance &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fun_Bsp_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart4_Fifo_Data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart3_Fifo_Data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart2_Fifo_Data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Receive_Uart1_Fifo_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Routime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12e]"></a>nvic_irq_disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f435_437_misc.o(i.nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Falsh_Jump
</UL>

<P><STRONG><a name="[153]"></a>nvic_irq_enable</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, at32f435_437_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[15f]"></a>nvic_priority_group_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f435_437_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[15e]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Hal_Init
</UL>

<P><STRONG><a name="[166]"></a>open_closs_gnss</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bsp_config.o(i.open_closs_gnss))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = open_closs_gnss &rArr; Hal_Uart1_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Pow_State
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>

<P><STRONG><a name="[162]"></a>open_closs_rdss</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bsp_config.o(i.open_closs_rdss))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = open_closs_rdss &rArr; Hal_Uart4_Init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Sys_State
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>

<P><STRONG><a name="[161]"></a>ota_start_rep</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_config.o(i.ota_start_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ota_start_rep &rArr; Port_Tx_Cmd_Pack &rArr; uart3_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Falsh_Jump
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Write_Boot_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>

<P><STRONG><a name="[138]"></a>pwc_battery_powered_domain_access</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_pwc.o(i.pwc_battery_powered_domain_access))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_RTC_init
</UL>

<P><STRONG><a name="[180]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[14e]"></a>system_core_clock_update</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, system_at32f435_437.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[14f]"></a>systick_clock_source_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f435_437_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_System_Clock_Init
</UL>

<P><STRONG><a name="[16f]"></a>tmr_channel_value_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_channel_value_get))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>tmr_counter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_counter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[195]"></a>tmr_div_value_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_div_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[196]"></a>tmr_event_sw_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_event_sw_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[170]"></a>tmr_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>tmr_input_channel_divider_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_input_channel_divider_set))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[197]"></a>tmr_input_channel_init</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, at32f435_437_tmr.o(i.tmr_input_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_input_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[19a]"></a>tmr_interrupt_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[16e]"></a>tmr_interrupt_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>tmr_iremap_config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at32f435_437_tmr.o(i.tmr_iremap_config))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[19b]"></a>tmr_reset</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, at32f435_437_tmr.o(i.tmr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tmr_reset &rArr; crm_periph_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lick_frequency_get
</UL>

<P><STRONG><a name="[15c]"></a>uart2_tx_string</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hal_uart.o(i.uart2_tx_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_str_printf
</UL>

<P><STRONG><a name="[168]"></a>uart3_tx_string</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hal_uart.o(i.uart3_tx_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart3_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
</UL>

<P><STRONG><a name="[f5]"></a>uart4_tx_string</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hal_uart.o(i.uart4_tx_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart4_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCTCQ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rdss_Tx_CCICR
</UL>

<P><STRONG><a name="[174]"></a>usart_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_tx_string
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_tx_string
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_tx_string
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[150]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Deinit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
</UL>

<P><STRONG><a name="[173]"></a>usart_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>usart_flag_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_tx_string
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_tx_string
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_tx_string
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[154]"></a>usart_init</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, at32f435_437_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
</UL>

<P><STRONG><a name="[151]"></a>usart_interrupt_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at32f435_437_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Deinit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Deinit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Deinit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
</UL>

<P><STRONG><a name="[172]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>usart_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
</UL>

<P><STRONG><a name="[15a]"></a>usart_transmit_receive_pin_swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_transmit_receive_pin_swap))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
</UL>

<P><STRONG><a name="[155]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart4_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart1_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Uart2_Init
</UL>

<P><STRONG><a name="[165]"></a>versions_rep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_config.o(i.versions_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = versions_rep &rArr; Port_Tx_Cmd_Pack &rArr; uart3_tx_string
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Tx_Cmd_Pack
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Rxdata_deal
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[185]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[177]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[187]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[186]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[73]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[70]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[96]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
